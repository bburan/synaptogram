import logging
log = logging.getLogger(__name__)

from importlib import resources

from enaml.application import deferred_call
from enaml.core.api import Conditional
from enaml.icon import Icon, IconImage
from enaml.image import Image
from enaml.layout.api import (
    align, hbox, spacer, AreaLayout, DockBarLayout, HSplitLayout,
    InsertTab, TabLayout, VSplitLayout
)
from enaml.stdlib.fields import FloatField
from enaml.stdlib.message_box import critical, information, question
from enaml.widgets.api import (
    Action, Container, DockArea, DockItem, FileDialogEx, Label, MainWindow,
    Menu, MenuBar, MPLCanvas, ObjectCombo, Splitter, SplitItem
)


from ndimage_enaml.gui import DisplayConfig, NDImageCanvas, NDImageContainer

from .presenter import SynaptogramPresenter


def load_icon(name):
    data = resources.files('synaptogram.icons').joinpath(f'{name}.png').read_bytes()
    icg = IconImage(image=Image(data=data))
    return Icon(images=[icg])


def open_imaris_file(window):
    path = FileDialogEx.get_open_file_name(window, current_path=str(window.current_path))
    if path:
        load_dataset(path, window)


def load_dataset(path, window):
    from .reader import ImarisReader

    window.current_path = path
    reader = ImarisReader(path)
    presenter = SynaptogramPresenter(obj=reader.load(), reader=reader)

    area = window.find('area')
    PointsDockItem(area, reader=reader, presenter=presenter)
    deferred_call(area.update_layout, InsertTab(item='points'))
    window.presenters.append(presenter)


def get_title(reader, unsaved_changes):
    title = f'{reader.path.stem}'
    if unsaved_changes:
        return f'*{title}'
    return title


def save_state(parent, presenters):
    q = 'Your previous analysis will be overwritten. Are you sure?'
    button = question(parent, 'Confirm action', q)
    if button is not None and button.text == 'Yes':
        for presenter in presenters:
            presenter.save_state()
        information(parent, 'Analysis saved', 'Analysis has been saved.')


def load_state(parent, presenters):
    if any(p.unsaved_changes for p in presenters):
        q = 'There are unsaved changes. Your current analysis will be lost. Are you sure?'
        button = question(parent, 'Confirm action', q)
        if button is None or button.text == 'No':
            return
    try:
        for presenter in presenters:
            print('loading state')
            presenter.load_state()
        information(parent, 'Analysis loaded', 'Analysis has been loaded.')
    except Exception as e:
        log.exception(e)
        information(parent, 'Error', str(e))


enamldef PointsContainer(Container):
    alias presenter: dc.presenter
    DisplayConfig: dc:
        padding = 0
    Container:
        padding = 0
        constraints = [
            hbox(sort_label, sort, sort_value, sort_value_label, sort_radius, sort_radius_label, spacer(0)),
            align('v_center', sort_label, sort, sort_value, sort_value_label, sort_radius, sort_radius_label)
        ]
        Label: sort_label:
            text = 'Sort by'
        ObjectCombo: sort:
            items << presenter.obj.channel_names
            selected := presenter.artist.sort_channel
        ObjectCombo: sort_value:
            items = ['mean', 'max', 'median']
            selected := presenter.artist.sort_value
        Label: sort_value_label:
            text = 'intensity using a'
        FloatField: sort_radius:
            value := presenter.artist.sort_radius
        Label: sort_radius_label:
            text = 'um radius'

    NDImageCanvas:
        toolbar_visible = False
        figure = presenter.figure


enamldef PointsDockItem(DockItem): di:
    name = 'points'
    title = 'Points'
    attr presenter
    attr reader
    title << get_title(reader, presenter.unsaved_changes)

    Container:
        Splitter:
            orientation = 'horizontal'
            SplitItem:
                Container:
                    Splitter:
                        orientation = 'vertical'
                        SplitItem:
                            Container:
                                NDImageCanvas:
                                    toolbar_visible = False
                                    figure = di.presenter.overview.figure
                        SplitItem:
                            Container:
                                NDImageCanvas:
                                    toolbar_visible = False
                                    figure = di.presenter.point_projection.figure
            SplitItem:
                PointsContainer:
                    presenter = di.presenter.points


enamldef SynaptogramWindow(MainWindow): window:

    initial_size = (1200, 800)
    icon = load_icon('main-icon')
    attr current_path
    attr presenters = []

    title = 'Synaptogram'

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Open Imaris file\tCtrl+O'
                triggered::
                    try:
                        open_imaris_file(window)
                    except Exception as e:
                        log.exception(e)
                        critical(window, 'Open', str(e))
            Action:
                text = 'Save analysis\tCtrl+S'
                triggered::
                    save_state(window, presenters)
            Action:
                text = 'Load analysis\tCtrl+L'
                triggered::
                    load_state(window, presenters)

    Container:
        DockArea: workspace:
            name = 'area'
            layout = AreaLayout(dock_bars=[DockBarLayout('help', position='left')])

            DockItem:
                name = 'help'
                title = 'Help'
                closable = False
